apiVersion: v1
kind: Namespace
metadata:
  name: odoo  # < Semantics: A technical team whith a set of RBAC. You can create client-accesible namespaces
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    certmanager.k8s.io/cluster-issuer: letsencrypt-prod  # < If using cert-manager (LetsEncrypt-SSL), an annotation indicating the issuer to use.
  name: odoo-ingress
  namespace: odoo
spec:
  rules:
  - host: testcluster.example.com  # < domain based routing
    http:
      paths:
      - path:
        backend:
          serviceName: mausi-10.0-server  # < Constructed as: <CLUSTERNAME>-<TRACKNAME>-server; Note: "server" is the Tier
          servicePort: 8069
      - path: /longpolling
        backend:
          serviceName: mausi-10.0-longpolling  # < Constructed as: <CLUSTERNAME>-<TRACKNAME>-longpolling; Note: "longpolling" is the Tier
          servicePort: 8072
  tls:  # < placing a host in the TLS config will indicate a cert should be created
  - hosts:
    - "*.example.com"  # < Hostnames for certs
    secretName: odoo-ingress-cert  # < cert-manager will store the created certificate in this secret. Note: "odoo-ingress" Is the Ingress Resource name.
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: odoo-pv0001
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  hostPath:
    path: /mnt/volumes/odoo-pv0001  # < ATTENTION: After *first* creation, ssh into the host and chmod 770 && chown root:2000; Note: 2000 is a magic group
    type: DirectoryOrCreate
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: odoo-pv0002
spec:
  capacity:
    storage: 4Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  hostPath:
    path: /mnt/volumes/odoo-pv0002  # < ATTENTION: After *first* creation, ssh into the host and chmod 770 && chown root:2000; Note: 2000 is a magic group
    type: DirectoryOrCreate
---


#### ACTUAL CLUSTER DEFINITION BEGINS HERE ####
apiVersion: "odoo.k8s.io/v1alpha1"
kind: "OdooCluster"
metadata:
  name: "mausi"  # < Name of your cluster (change accordingly where name is used by other resources)
  namespace: "odoo"  # < Namespace (change accordingly where used by other resources)
spec:
  # config: |  # < those will be mapped to the [options] section (cluster-scoped)
  #   db_name = false
  #   db_template = template0
  #   list_db = false
  #   dbfilter = "^%h$"
  #   email_from: ""
  #   smtp_server: ""
  #   smtp_port: "465"
  #   smtp_ssl: "true"
  #   smtp_user: ""
  #   smtp_password: ""
  # integratorConfig: |  # < if you use the [integrator] section (cluster-scoped)
  #   integrator_warranty_url = "https://erp.xoe.solutions/integrator-warranty/"
  # customConfig: |  # < if you use any custom sections (cluster-scoped)
  #   [mysection]
  #   my-key=my-value
  tracks:
    - name: "10.0"  # < eg. 10.0 | 11.0 | 12.0 or 11.0-1.4.3, if you manage sub version release cycles. You can manage several tracks in parallel, see Ingress Controller.
      image:
        # Create registry credentials
        # See: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-secret-in-the-cluster-that-holds-your-authorization-token
        secret: regcred  # < Configure, if this is a private image in a private registry
        registry: "registry.gitlab.com"
        image: "xoe/odoo/odoo-xoe"
        tag: "master"
      # config: |  # < those will be mapped to the [options] section (track-scoped)
      #   log_handler = ":WARNING"
      #   server_wide_modules = web_kanban,web
      # integratorConfig: |  # < if you use the [integrator] section (track-scoped)
      #   integrator_warranty_url = "https://erp.xoe.solutions/integrator-warranty/"
      # customConfig: |  # < if you use any custom sections (track-scoped)
      #   [mysection]
      #   my-key=my-value

    # - name: "11.0"
    #   image:
    #     registry: "registry.gitlab.com"
    #     name: "xoe/odoo/odoo-xoe"
    #     tag: "11.0"
  tiers:
    - name: "Server"
      replicas: 1  # < Scale workers. 1 replica = 1 worker
      # dbConn:  # < Adjust according to expected concurrent workload for normal use, default: 16
      # qos:  # < K8S QOS spec to prioritize resource allocation
      # resources:  # < K8S Resource request: specify available resources per replica
    - name: "Cron"
      replicas: 1
      # qos:  # < K8S QOS spec to prioritize resource allocation
      # resources:  # < K8S Resource request: specify available resources per replica
    - name: "LongPolling"
      replicas: 1
      # dbConn:  # < Adjust according to expected concurrent workload for chat use, default: 16
      # qos:  # < K8S QOS spec to prioritize resource allocation
      # resources:  # < K8S Resource request: specify available resources per replica
  volumes:
    - name: "Data"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
      # storageClassName:  # < Use for dynamic provisioning
    - name: "Backup"  # < This is not officially used by Odoo, but custom implementation of some backup cron is so basic to reliable operation, it landed here.
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 3Gi
      # storageClassName:  # < Use for dynamic provisioning

  pgNsSpec:  # < TODO: Create DB Namespace (user:password) for this cluster
    user: "odoo-psql-staging"
    password: "odoo-psql-staging"
    # userQuota:  # < TODO: Add db quota reporting (disk usage)
    pgCluster:  # < We expect an externally deployed DB cluster, put root access in here
      host: "database"
      port: "5432"
      user: "postgres"
      password: "postgres"

  adminPassword: "default-admin-password"  # < It is what it seems to be

  # resourceQuotaSpec:  # < TODO: specify overall cluster quota (note: scale accordingly during multi-track deployment states, eg during migration)

  # nodeSelector:  # < Use for onsite, potentially air-gapped, deployments through node labels
